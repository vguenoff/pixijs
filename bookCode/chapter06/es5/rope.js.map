{"version":3,"sources":["../es6/rope.js"],"names":[],"mappings":";;;AACA,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS;IAC5B,kBAAkB,GAAG,IAAI,CAAC,kBAAkB;IAC5C,MAAM,GAAG,IAAI,CAAC,MAAM;IACpB,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY;IACtC,OAAO,GAAG,IAAI,CAAC,OAAO;IACtB,MAAM,GAAG,IAAI,CAAC,MAAM;IACpB,KAAK,GAAG,IAAI,CAAC,KAAK;IAClB,IAAI,GAAI,IAAI,CAAC,IAAI,CAAC,IAAI;IACtB,aAAa,GAAG,IAAI,CAAC,aAAa;IAClC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;;;AAG1C,IAAI,KAAK,GAAG,IAAI,SAAS,EAAE;IACzB,QAAQ,GAAG,kBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC1C,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;;;AAGzC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,kBAAkB,CAAC;AAChD,QAAQ,CAAC,eAAe,GAAG,UAAU,CAAC;;;AAGtC,MAAM,CACH,GAAG,CAAC,kBAAkB,CAAC,CACvB,IAAI,CAAC,KAAK,CAAC,CAAC;;;AAGf,IAAI,KAAK,GAAG,IAAI,CAAC;;;AAGjB,IAAI,MAAM,YAAA;IAAE,OAAO,YAAA;IAAE,WAAW,YAAA;IAAE,gBAAgB,YAAA;IAAE,UAAU,YAAA,CAAC;;AAE/D,SAAS,KAAK,GAAG;;;;;AAKf,kBAAgB,GAAG,EAAE,CAAC;AACtB,YAAU,GAAG,GAAG,CAAC;AACjB,aAAW,GAAG,UAAU,GAAG,gBAAgB,CAAC;;;AAG5C,QAAM,GAAG,EAAE,CAAC;AACZ,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,EAAE,CAAC,EAAE,EAAE;AACzC,UAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;GAC5C;;;;AAID,MAAI,KAAK,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,EAAE,MAAM,CAAC,CAAC;;;AAG/D,MAAI,cAAc,GAAG,IAAI,SAAS,EAAE,CAAC;AACrC,gBAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;;AAG/B,OAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;AAC/B,gBAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;;;AAGrC,SAAO,GAAG,CAAC,CAAC;;;AAGZ,UAAQ,EAAE,CAAC;CACZ;;AAED,SAAS,QAAQ,GAAE;;;AAGjB,uBAAqB,CAAC,QAAQ,CAAC,CAAC;;;AAGhC,OAAK,EAAE,CAAC;;;AAGR,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;CACxB;;AAED,SAAS,IAAI,GAAG;;;AAGd,SAAO,IAAI,GAAG,CAAC;;;;AAIf,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtC,UAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,AAAC,CAAC,GAAG,GAAG,GAAI,OAAO,CAAC,GAAG,EAAE,CAAC;AACjD,UAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,AAAC,CAAC,GAAG,GAAG,GAAI,OAAO,CAAC,GAAG,gBAAgB,CAAC;GAClF;CACF","file":"rope.js","sourcesContent":["//Aliases\nlet Container = PIXI.Container,\n  autoDetectRenderer = PIXI.autoDetectRenderer,\n  loader = PIXI.loader,\n  TextureCache = PIXI.utils.TextureCache,\n  Texture = PIXI.Texture,\n  Sprite = PIXI.Sprite,\n  Point = PIXI.Point,\n  Rope =  PIXI.mesh.Rope,\n  RenderTexture = PIXI.RenderTexture,\n  TilingSprite = PIXI.extras.TilingSprite;\n\n//Create a Pixi stage and renderer\nlet stage = new Container(),\n  renderer = autoDetectRenderer(750, 300);\ndocument.body.appendChild(renderer.view);\n\n//Set the canvas's border style and background color\nrenderer.view.style.border = \"1px dashed black\";\nrenderer.backgroundColor = \"0xFFFFFF\";\n\n//load resources (images and fonts)\nloader\n  .add(\"images/snake.png\")\n  .load(setup);\n\n//Set the initial game state\nlet state = play;\n\n//Define any variables that are used in more than one function\nlet points, counter, ropeSegment, numberOfSegments, imageWidth;\n\nfunction setup() {\n\n  //Figure out the length of each rope segment. We want a rope with\n  //20 segments, so divide the length of the image, which is 600\n  //pixels, by 20\n  numberOfSegments = 20;\n  imageWidth = 600;\n  ropeSegment = imageWidth / numberOfSegments;\n\n  //Create an array of 20 Point object, one for each rope segment\n  points = [];\n  for (let i = 0; i < numberOfSegments; i++) {\n    points.push(new Point(i * ropeSegment, 0));\n  }\n\n  //Create the snake as a `Rope` object. The first argument is the\n  //texture, the second is the `points` array\n  let snake = new Rope(TextureCache[\"images/snake.png\"], points);\n\n  //Add the snake to a container, so it's easier to position\n  let snakeContainer = new Container();\n  snakeContainer.addChild(snake);\n\n  //Add the container to the stage and position it\n  stage.addChild(snakeContainer);\n  snakeContainer.position.set(64, 128);\n\n  //Intialize the counter variable\n  counter = 0;\n\n  //Start the game loop\n  gameLoop();\n}\n\nfunction gameLoop(){\n\n  //Loop this function 60 times per second\n  requestAnimationFrame(gameLoop);\n\n  //Run the current state\n  state();\n\n  //Render the stage\n  renderer.render(stage);\n}\n\nfunction play() {\n\n  //Increment the counter\n  counter += 0.1;\n\n  //Loop through all the points and shift them in a circular\n  //pattern to produce the rippling effect.\n  for (let i = 0; i < points.length; i++) {\n    points[i].y = Math.sin((i * 0.5) + counter) * 30;\n    points[i].x = i * ropeSegment + Math.cos((i * 0.3) + counter) * numberOfSegments;\n  }\n}\n\n"]}