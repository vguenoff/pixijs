{"version":3,"sources":["../es6/spriteFromTextureAtlas.js"],"names":[],"mappings":"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","file":"spriteFromTextureAtlas.js","sourcesContent":["\n//Aliases\nlet Container = PIXI.Container,\n    autoDetectRenderer = PIXI.autoDetectRenderer,\n    loader = PIXI.loader,\n    resources = PIXI.loader.resources,\n    TextureCache = PIXI.utils.TextureCache,\n    Texture = PIXI.Texture,\n    Sprite = PIXI.Sprite;\n\n//Create a Pixi stage and renderer and add the \n//renderer.view to the DOM\nlet stage = new Container(),\n    renderer = autoDetectRenderer(512, 512);\ndocument.body.appendChild(renderer.view);\n\n//Load an image and run the `setup` function when it's done\nloader\n  .add(\"images/treasureHunter.json\")\n  .load(setup);\n\n//Define variables that might be used in more \n//than one function\nlet dungeon, explorer, treasure, door, id;\n\nfunction setup() {\n\n  //There are two basic ways to create sprites from loaded texture\n  //atlases:\n  //1. Access the `TextureCache` directly\n  let dungeonTexture = TextureCache[\"dungeon.png\"];\n  dungeon = new Sprite(dungeonTexture);\n  stage.addChild(dungeon);\n\n  //2. Access the texture using throuhg the loader's `resources`:\n  explorer = new Sprite(\n    resources[\"images/treasureHunter.json\"].textures[\"explorer.png\"]\n  );\n  explorer.x = 68;\n\n  //Center the explorer vertically\n  explorer.y = stage.height / 2 - explorer.height / 2;\n  stage.addChild(explorer);\n\n  //Create an optional alias called `id` for all the texture atlas frame id\n  //textures.\n  let id = PIXI.loader.resources[\"images/treasureHunter.json\"].textures; \n  \n  //Make the treasure box using the alias\n  treasure = new Sprite(id[\"treasure.png\"]);\n  stage.addChild(treasure);\n\n  //Position the treasure next to the right edge of the canvas\n  treasure.x = stage.width - treasure.width - 48;\n  treasure.y = stage.height / 2 - treasure.height / 2;\n  stage.addChild(treasure);\n\n  //Make the exit door\n  door = new Sprite(id[\"door.png\"]); \n  door.position.set(32, 0);\n  stage.addChild(door);\n\n  //Make the blobs\n  let numberOfBlobs = 6,\n      spacing = 48,\n      xOffset = 150;\n\n  //Make as many blobs as there are `numberOfBlobs`\n  for (let i = 0; i < numberOfBlobs; i++) {\n\n    //Make a blob\n    let blob = new Sprite(id[\"blob.png\"]);\n\n    //Space each blob horizontally according to the `spacing` value.\n    //`xOffset` determines the point from the left of the screen\n    //at which the first blob should be added.\n    let x = spacing * i + xOffset;\n\n    //Give the blob a random y position\n    //(`randomInt` is a custom function - see below)\n    let y = randomInt(0, stage.height - blob.height);\n\n    //Set the blob's position\n    blob.x = x;\n    blob.y = y;\n\n    //Add the blob sprite to the stage\n    stage.addChild(blob);\n  }\n\n  //Render the stage   \n  renderer.render(stage);\n}\n\n//The `randomInt` helper function\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n"]}