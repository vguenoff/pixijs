{"version":3,"sources":["../es6/displayingTheCanvas.js"],"names":[],"mappings":";;;AACA,IAAI,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;AAuBjD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;;;;AAIzC,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;;;;;AAKjC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,kBAAkB,CAAC;;;;;;AAMhD,QAAQ,CAAC,eAAe,GAAG,QAAQ,CAAC;;;;;;;;;;;;AAYpC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;;;;AAIvB,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACzC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC","file":"displayingTheCanvas.js","sourcesContent":["//Create the renderer\nlet renderer = PIXI.autoDetectRenderer(144, 256);\n\n/* You can also create a renderer with more advanced options like this:\n//Create a Pixi renderer \nlet renderer = PIXI.autoDetectRenderer(\n  256,                     //Width \n  256,                     //Height\n  {                        //Options\n    antialiasing: false, \n    transparent: false, \n    resolution: 1\n  }, \n  false                    //Optionally force canvas rendering\n);\n\n//Force canvas rendering like this: \n//let renderer = new PIXI.CanvasRenderer(256, 256);\n\n//Force WebGL rendering like this:\n//let renderer = new PIXI.WebGLRenderer(256, 256);\n*/\n\n//Add the canvas to the HTML document\ndocument.body.appendChild(renderer.view);\n\n//Create a container object called the `stage`. The `stage` is the\n//root container for all your objects\nlet stage = new PIXI.Container();\n\n//The `renderer.view` is just an ordinary `<canvas>` element.\n//Here's how you can reference to add an optional dashed\n//border around the canvas\nrenderer.view.style.border = \"1px dashed black\";\n\n//To resize the canvas\n//renderer.resize(512, 512);\n\n//To change the background color\nrenderer.backgroundColor = 0xFFFFFF;\n\n//If you want to make the canvas fill the entire window, you can apply this\n//CSS styling:\n/*\nrenderer.view.style.position = \"absolute\"\nrenderer.view.style.width = window.innerWidth + \"px\";\nrenderer.view.style.height = window.innerHeight + \"px\";\nrenderer.view.style.display = \"block\";\n*/\n\n//Tell the renderer to render the stage\nrenderer.render(stage);\n\n//Use the custom `scaleToWindow` function to scale and align Pixi's\n//canvas to the maximum browser window size.\nlet scale = scaleToWindow(renderer.view);\nconsole.log(scale);\n\n//# sourceMappingURL=displayingTheCanvas.js.map\n"]}