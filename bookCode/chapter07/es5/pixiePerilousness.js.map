{"version":3,"sources":["../es6/pixiePerilousness.js"],"names":[],"mappings":"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","file":"pixiePerilousness.js","sourcesContent":["//Aliases\nlet Container = PIXI.Container,\n  autoDetectRenderer = PIXI.autoDetectRenderer,\n  Graphics = PIXI.Graphics,\n  Sprite = PIXI.Sprite,\n  MovieClip = PIXI.extras.MovieClip,\n  TilingSprite = PIXI.extras.TilingSprite,\n  loader = PIXI.loader,\n  resources = PIXI.loader.resources,\n  Text = PIXI.Text;\n\n//Create a Pixi stage and renderer\nlet stage = new Container(),\n  renderer = autoDetectRenderer(910, 512);\ndocument.body.appendChild(renderer.view);\n\n//Scale the canvas to the maximum window size\nlet scale = scaleToWindow(renderer.view);\n\n//Set the initial game state\nlet state = play;\n\n//load resources\nloader\n  .add(\"images/pixiePerilousness.json\")\n  .load(setup);\n\n//Define any variables that might be used in more than one function\nlet t, b, d, pd, u, id, pointer, circle, pixie, sky, blocks, \n    finish, particleStream, dustFrames;\n\nfunction setup() {\n\n  /* Intialize all the helper libraries */\n\n  //Create a new instance of Tink, the interactive module. \n  //The last argument, `scale` is\n  //the return value of the `scaleToWindow` function above\n  t = new Tink(PIXI, renderer.view, scale);\n\n  //Create a new instance of Bump, the collision module\n  b = new Bump(PIXI);\n\n  //Create a new instance of SpriteUtilities, for easy sprite creation\n  u = new SpriteUtilities(PIXI);\n\n  //Get a reference to the texture atlas id's\n  id = resources[\"images/pixiePerilousness.json\"].textures;\n\n  /* Create the sprites */\n\n  //Make the sky background\n  sky = new TilingSprite(\n    id[\"clouds.png\"], \n    renderer.view.width, \n    renderer.view.height\n  );\n  stage.addChild(sky);\n\n  //Make the world\n  //Create a `Container` for all the blocks\n  blocks = new Container();\n  stage.addChild(blocks);\n\n  //What should the initial size of the gap be between the pillars?\n  let gapSize = 4;\n\n  //How many pillars?\n  let numberOfPillars = 15;\n\n  //Loop 15 times to make 15 pillars\n  for (let i = 0; i < numberOfPillars; i++) {\n\n    //Randomly place the gap somewhere inside the pillar\n    let startGapNumber = randomInt(0, 8 - gapSize); \n\n    //Reduce the `gapSize` by one after every fifth pillar. This is\n    //what makes gaps gradually become narrower\n    if (i > 0 && i % 5 === 0) gapSize -= 1; \n\n    //Create a block if it's not within the range of numbers\n    //occupied by the gap\n    for (let j = 0; j < 8; j++) {\n      if (j < startGapNumber || j > startGapNumber + gapSize - 1) {\n        let block = u.sprite(id[\"greenBlock.png\"]);\n        blocks.addChild(block);\n\n        //Space each pillar 384 pixels apart. The first pillar will be\n        //placed at an x position of 512\n        block.x = (i * 384) + 512;\n        block.y = j * 64;\n      }\n    }\n\n    //After the pillars have been created, add the finish image\n    //right at the end\n    if (i === numberOfPillars - 1) {\n      finish = u.sprite(id[\"finish.png\"]);\n      blocks.addChild(finish);\n      finish.x = (i * 384) + 896;\n      finish.y = 192;\n    }\n  }\n\n  //Make the pixie sprite\n  let pixieFrames = [\n    id[\"0.png\"], \n    id[\"1.png\"], \n    id[\"2.png\"]\n  ];\n  pixie = u.sprite(pixieFrames);\n  stage.addChild(pixie);\n  pixie.fps = 24;\n  pixie.position.set(232, 32);\n  pixie.vy = 0;\n  pixie.oldVy = 0;\n\n  //Create the frames array for the pixie dust images\n  //that trail the pixie\n  dustFrames = [\n    id[\"pink.png\"],\n    id[\"yellow.png\"],\n    id[\"green.png\"],\n    id[\"violet.png\"]\n  ];\n\n  //Create the particle emitter.\n  //First create a new instance of Dust, the particle\n  //effects library\n  d = new Dust(PIXI);\n  \n  //Next, create the emitter\n  particleStream = d.emitter(\n    300,                                 //The interval\n    () => d.create(                     //The function\n      pixie.x + 8,                       //x position\n      pixie.y + pixie.height / 2,        //y position\n      () => u.sprite(dustFrames),        //Particle sprite\n      stage,                             //The parent container\n      3,                                 //Number of particles\n      0,                                 //Gravity\n      true,                              //Random spacing\n      2.4, 3.6,                          //Min/max angle\n      18, 24,                            //Min/max size\n      2, 3,                              //Min/max speed\n      0.005, 0.01,                       //Min/max scale speed\n      0.005, 0.01,                       //Min/max alpha speed\n      0.05, 0.1                          //Min/max rotation speed\n    )\n  );\n\n  //Make the particle stream start playing when the game starts\n  particleStream.play();\n\n  //Make the pointer and increase the pixie's \n  //vertical velocity when it's tapped\n  pointer = t.makePointer();\n  pointer.tap = () => {\n    pixie.vy += 1.5;\n  };\n\n  //Start the game loop\n  gameLoop();\n}\n\nfunction gameLoop(){\n\n  //Loop this function 60 times per second\n  requestAnimationFrame(gameLoop);\n\n  //Run the current state\n  state();\n\n  //Update Tink\n  t.update();\n\n  //Update Dust\n  d.update();\n\n  //Render the stage\n  renderer.render(stage);\n}\n\nfunction play() {\n\n  //Make the sky background scroll by shifting the `tilePosition.x`\n  //of the `sky` tiling sprite\n  sky.tilePosition.x -= 1;\n\n  //Move the blocks 2 pixels to the left each frame.\n  //This will just happen while the finish image is off-screen.\n  //As soon as the finish image scrolls into view, the blocks\n  //container will stop moving\n  if (finish.getGlobalPosition().x > 256) {\n    blocks.x -= 2;\n  }\n\n  //Add gravity to the pixie\n  pixie.vy += -0.05;\n  pixie.y -= pixie.vy;\n\n  //Decide whether or not the pixie should flap her wings \n  //If she's starting to go up, make her flap her wings and emit pixie dust\n  if (pixie.vy > pixie.oldVy) {\n    if(!pixie.animating) {\n      pixie.playAnimation();\n      if (pixie.visible && !particleStream.playing) {\n        particleStream.play();\n      }\n    }\n  }\n  //If she's staring to go down, stop flapping her wings, show the first frame \n  //and stop the pixie dust\n  if (pixie.vy < 0 && pixie.oldVy > 0) {\n    if (pixie.animating) pixie.stopAnimation();\n    pixie.show(0);\n    if (particleStream.playing) particleStream.stop();\n  }\n\n  //Store the pixie's current vy so we can use it\n  //to find out if the pixie has changed direction\n  //in the next frame. (You have to do this as the last step)\n  pixie.oldVy = pixie.vy;\n\n  //Keep the pixie contained inside the stage and \n  //neutralize her velocity if she hits the top or bottom boundary\n  let pixieVsCanvas = b.contain(\n    pixie,                           \n    {                                \n      x: 0,                         \n      y: 0,                        \n      width: renderer.view.width,    \n      height: renderer.view.height  \n    }\n  );\n  if (pixieVsCanvas) {\n    if (pixieVsCanvas.has(\"bottom\") || pixieVsCanvas.has(\"top\")) {\n      pixie.vy = 0;  \n    }\n  }\n\n  //Loop through all the blocks and check for a collision between\n  //each block and the pixie. (`some` will quit the loop as soon as\n  //`hitTestRectangle` returns `true`). Set `hitTestRectangle`s third argument\n  //to `true` to use the sprites' global coordinates\n\n  let pixieVsBlock = blocks.children.some(block => {\n    return b.hitTestRectangle(pixie, block, true);  \n  });\n\n  //If there's a collision and the pixie is currently visible,\n  //create the explosion effect and reset the game after\n  //a three second delay\n\n  if (pixieVsBlock && pixie.visible) {\n\n    //Make the pixie invisible\n    pixie.visible = false;\n\n    //Create a pixie dust explosion\n    d.create(\n      pixie.centerX, pixie.centerY, //x and y position\n      () => u.sprite(dustFrames),   //Particle sprite\n      stage,                        //The parent container\n      20,                           //Number of particles\n      0,                            //Gravity\n      false,                        //Random spacing\n      0, 6.28,                      //Min/max angle\n      16, 32,                       //Min/max size\n      1, 3                          //Min/max speed\n    );\n    \n    //Stop the dust emitter that's trailing the pixie\n    particleStream.stop();\n\n    //Wait 3 seconds and then reset the game\n    wait(3000).then(() => reset());\n  }\n}\n\n//The `reset` function runs if the pixie hits a block\nfunction reset() {\n\n  //Reset the game if the pixie hits a block\n  pixie.visible = true;\n  pixie.y = 32;\n  particleStream.play();\n  blocks.x = 0;\n}\n\n//Helper functions\n\n//The `randomInt` helper function\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n//The `wait` helper function\nfunction wait(duration = 0) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, duration);\n  });\n}\n"]}